@page "/"
@using System.Net
@using hhnl.HomeAssistantNet.CSharpForHomeAssistant.Web.Components
@using hhnl.HomeAssistantNet.CSharpForHomeAssistant.Web.Services
@using hhnl.HomeAssistantNet.Shared.Automation
@using hhnl.HomeAssistantNet.Shared.Supervisor
@inject SupervisorApiService _supervisorApiService
@implements IDisposable

<h1>Automations</h1>

<div class="list-group">
    @if (Connection is not null)
    {
        @foreach (var automation in Connection.Automations)
        {
            <a href="automation/@automation.Info.Name.Replace(".", "|")" class="list-group-item list-group-item-action">
                <div class="w-100">
                    <div class="d-flex w-100 justify-content-between">
                        <h5 class="mb-1">@automation.Info.DisplayName</h5>
                        <div>
                            <small>@automation.Runs.Count Runs |</small>
                            <span class="badge rounded-pill bg-info text-light">@automation.Runs.Where(r => r.State == AutomationRunInfo.RunState.WaitingInQueue).Count()</span>
                            <span class="badge rounded-pill bg-success text-light">@automation.Runs.Where(r => r.State == AutomationRunInfo.RunState.Running).Count()</span>
                            <span class="badge rounded-pill bg-secondary text-light">@automation.Runs.Where(r => r.State == AutomationRunInfo.RunState.Completed).Count()</span>
                            <span class="badge rounded-pill bg-warning">@automation.Runs.Where(r => r.State == AutomationRunInfo.RunState.Cancelled).Count()</span>
                            <span class="badge rounded-pill bg-danger text-light">@automation.Runs.Where(r => r.State == AutomationRunInfo.RunState.Error).Count()</span>
                        </div>
                    </div>
                    <small class="text-muted">@automation.Info.Name</small>
                </div>
            </a>
        }
    }
</div>

@code
{
    private IDisposable? _connectionChangedSubscription;

    protected override void OnInitialized()
    {
        _connectionChangedSubscription = _supervisorApiService.Connection.Subscribe(c =>
        {
            Connection = c;
            StateHasChanged();
        });
    }

    public ConnectionInfo? Connection { get; set; }

    public void Dispose()
    {
        _connectionChangedSubscription?.Dispose();
    }
}