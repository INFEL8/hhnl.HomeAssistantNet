@inject SupervisorApiService _supervisorApiService
@using ReactiveUI
@using hhnl.HomeAssistantNet.CSharpForHomeAssistant.Web.Services
@using hhnl.HomeAssistantNet.Shared.Supervisor
@using System.Reactive.Disposables
@inherits LayoutComponentBase
@implements IDisposable

<nav class="navbar navbar-expand-lg navbar-dark fixed-top bg-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="#">C# for Home Assistant</a>
        <div class="navbar-text">@NavBarText</div>
        <button disabled="@(_supervisorApiService.State == SupervisorApiService.ApplicationState.BuildAndDeploy)" class="d-flex btn btn-primary" @onclick="OnBuildClick" type="submit">Build & Deploy</button>
    </div>
</nav>
<div class="page">
    <div class="main">
        <div class="container">
            @Body
        </div>
    </div>
</div>
@if (Connection is null || !Connection.IsComplete)
{
    <div class="overlay">
        <div class="spinner-border text-primary"></div>
    </div>
}

@code
{
    private IDisposable? _connectionChangedSubscription;

    protected override Task OnInitializedAsync()
    {
        _connectionChangedSubscription = _supervisorApiService.Connection.Subscribe(t =>
        {
            Connection = t;
            StateHasChanged();
        });

        return _supervisorApiService.StartAsync();
    }

    ConnectionInfo? Connection { get; set; }

    public void Dispose()
    {
        _connectionChangedSubscription?.Dispose();
    }

    private async Task OnBuildClick()
    {
        await _supervisorApiService.BuildAndDeployAsync();
    }

    private string NavBarText => Connection switch
    {
        null => "Not connected - Waiting for connection ...",
        { IsComplete: false, IsRemote: true } => "Connected (Remote) - Retrieving automations ...",
        { IsComplete: false, IsRemote: false } => "Connected (Local) - Retrieving automations ...",
        { IsComplete: true, IsRemote: true } => "Connected (Remote)",
        { IsComplete: true, IsRemote: false } => "Connected (Local)"
    };
}