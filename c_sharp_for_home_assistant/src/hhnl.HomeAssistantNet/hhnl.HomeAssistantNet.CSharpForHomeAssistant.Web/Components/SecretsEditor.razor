@using hhnl.HomeAssistantNet.Shared.Configuration

<div class="container">
    @for(var i = 0; i < Keys.Count; i++)
    {
        var index = i;

        <div class="row mb-2">
            <div class="col-auto">
                <input value="@Keys[index]" @onchange="(e => Keys[index] = (e.Value?.ToString() ?? string.Empty))" type="text" class="form-control" placeholder="Key">
            </div>
            <div class="col-auto">
                <input value="@Values[index]" @onchange="(e => Values[index] = (e.Value?.ToString() ?? string.Empty))" type="text" class="form-control" placeholder="Value">
            </div>
            <div class="col-auto">
                <button type="submit" class="btn btn-danger" @onclick="() => Remove(index)">Remove</button>
            </div>
        </div>

    }
    <button type="submit" class="btn btn-primary" @onclick="Add">Add</button>
    <button type="submit" class="btn btn-primary" @onclick="Save">Save</button>
</div>

@code {

    [CascadingParameter] BlazoredModalInstance? ModalInstance { get; set; }

    [Parameter] public AutomationSecrets Secrets { get; set; }

    private List<string> Keys { get; set; } = new();
    private List<string> Values { get; set; } = new();

    protected override void OnInitialized()
    {
        Keys = Secrets.Select(x => x.Key).ToList();
        Values = Secrets.Select(x => x.Value).ToList();
    }

    private void Remove(int i)
    {
        Keys.RemoveAt(i);
        Values.RemoveAt(i);
    }

    private void Add()
    {
        Keys.Add(string.Empty);
        Values.Add(string.Empty);
    }

    private void Save()
    {
        var secrets = new AutomationSecrets();

        for (var i = 0; i < Keys.Count; i++)
        {
            if (!secrets.ContainsKey(Keys[i]))
                secrets.Add(Keys[i], Values[i]);
        }

        ModalInstance?.CloseAsync(ModalResult.Ok(secrets));
    }
}
